[build-system]
requires = ["hatchling>=1.18.0", "python-semantic-release>=8.7.0", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "salvajson"
dynamic = ["version"]
description = "Fix corrupted JSON files using the jsonic JSON parser in JavaScript"
readme = "README.md"
requires-python = ">=3.10"
license = "Apache-2.0"
dependencies = [
    "pythonmonkey>=1.1.0",
    "fire>=0.7.0",
    "orjson>=3.10",
]
authors = [
    {name = "Adam Twardoch", email = "adam+github@twardoch.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[tool.hatch.metadata]
allow-direct-references = true
dynamic = ["version"]


[tool.hatch.version]
source = "vcs"
vcs_opts = { "tag_prefix" = "v" }

[tool.hatch.build.targets.wheel]
packages = ["src/salvajson"]
artifacts = ["src/salvajson/salvajson.js"]

[tool.hatch.build.targets.sdist]
include = [
    "src/salvajson",
    "js_src",
    "build.py",
    "README.md",
    "pyproject.toml"
]

[tool.hatch.build.hooks.custom]
path = "build.py"

[project.optional-dependencies]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-sugar>=1.0.0",
    "pytest-xdist>=3.6.0",
    "pytest-timeout>=2.3.0",
    "coverage>=6.0.0",
]
dev = [
    "build>=1.0.0",
    "hatchling>=1.18.0",
    "twine>=4.0.0",
    "python-semantic-release>=8.7.0",
    "pre-commit>=3.0.0", # Add pre-commit to dev dependencies
    "ruff>=0.4.4",
    "mypy>=1.10.0"
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --cov=src --cov-report=term-missing --cov-fail-under=80"
filterwarnings = [
    "ignore::pytest.PytestAssertRewriteWarning",
    "ignore::pytest.PytestConfigWarning"
]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "setup.py"] # setup.py typically doesn't exist in hatch projects

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
    "if TYPE_CHECKING:", # Standard exclusion for type checking blocks
]

[tool.ruff]
line-length = 88
indent-width = 4
target-version = "py310" # Match project's minimum Python

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C90", # mccabe complexity
    "N", # pep8-naming
    "UP", # pyupgrade
    "ANN", # flake8-annotations (start with some, like ANN101, ANN401 potentially)
    "S", # flake8-bandit (will add bandit hook separately for more control)
    "BLE", # flake8-blind-except
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "COM", # flake8-commas
    "PT", # flake8-pytest-style
    "T20", # flake8-print (T201 print, T203 pprint)
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "ARG", # flake8-unused-arguments
    "RUF", # Ruff-specific rules
]
ignore = [
    "ANN101", # Missing type annotation for self in method
    "ANN401", # Dynamically typed expressions (Any) are disallowed in annotations (common with external libs)
    "COM812", # Conflicts with ruff formatter regarding trailing commas
    # "ARG001" was moved to per-file-ignores
]
# Allow unused arguments in specific cases if necessary, e.g.
# unused-arguments.ignore-variadic-names = true

[tool.ruff.lint.per-file-ignores]
"build.py" = ["S603", "S607", "T201"] # subprocess and print
"src/salvajson/salvajson.py" = ["ARG001"] # Unused arguments for compatibility
"tests/*" = ["S101", "ANN201"] # assert statements and missing fixture return types

[tool.ruff.lint.isort]
known-first-party = ["salvajson"]

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true
suppress-none-returning = true
allow-star-arg-any = true # Allow *args: Any, **kwargs: Any

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true # Set to true globally for simplicity with dynamic libs

# More specific ignores (can be added back if needed for stricter checks on other modules)
# [[tool.mypy.overrides]]
# module = "some_other_module_with_good_stubs"
# ignore_missing_imports = false

# Add other mypy settings as needed, e.g.
# disallow_untyped_defs = true # Consider enabling later
# check_untyped_defs = true # Consider enabling later
# strict = true # For much stricter checking later
allow_redefinition = false
show_error_codes = true
pretty = true
# explicit_package_bases = true # May need for monorepos or complex structures

# To handle specific "no-any-return" issues from pythonmonkey/orjson more gracefully:
# disallow_any_generics = false # Default
# warn_no_return = true # Default
# Can use # type: ignore[no-any-return] inline for specific dynamic functions

[tool.bandit]
exclude_dirs = ["tests", "js_src"] # Exclude test files and JS source from bandit Python scan
skips = [
    "B101", # assert_used (allow asserts in src code if any, though mostly in tests)
    "B603", # subprocess_without_shell_equals_true (for build.py)
    "B607", # start_process_with_partial_path (for build.py)
]
# B404: import_subprocess - This is needed for build.py, so not skipping globally.
# We can use # nosec on specific lines in build.py if B404 is flagged and acceptable.

[tool.semantic_release]
version_variable = "src/salvajson/_version.py:__version__" # Or pyproject.toml:version if hatch-vcs updates that
branch = "main" # Assuming 'main' is the release branch
changelog_file = "CHANGELOG.md"
commit_parser = "angular"
upload_to_release = true # Will create/update GitHub release notes
build_command = "pip install build && python -m build" # Command to build package if releasing
dist_path = "dist/" # Path to distributions
# For now, we are focusing on changelog generation.
# Full release automation (like PyPI upload) will be reviewed in Phase 3.
# So, upload_to_pypi = false (default) is fine for now.
major_on_zero = true # Feat on 0.x.y will release 1.0.0
commit_message = "chore(release): publish version {version} [skip ci]" # Commit message for version bump

[tool.semantic_release.changelog]
template_dir = "templates" # Optional: if you have custom templates
# Default template is usually fine.

[tool.semantic_release.publish]
# Configuration for publishing, e.g., to PyPI.
# For now, this step in semantic-release can be disabled or reviewed in Phase 3
# as CI already has a twine upload step.
# Default is to upload to PyPI if relevant tokens are found.
# We can explicitly set `upload_to_pypi = false` if we want CI to handle it exclusively for now.
# Or, ensure this aligns with the existing GHA publish job.
# The GHA publish job uses twine directly.
# Let's disable semantic-release's direct PyPI upload for now to avoid conflict.
upload_to_pypi = false
upload_to_repository = false # for other repositories like GitHub Packages

# python-semantic-release also updates the version in the specified file.
# If hatch-vcs is the primary mechanism for versioning during dev and build,
# semantic-release should ideally only tag.
# However, it needs to write the version somewhere for the commit it makes.
# If it writes to _version.py, that's fine. If it writes to pyproject.toml,
# ensure hatch-vcs picks that up or there's no conflict.
# Setting `version_source = "tag"` might be an option if we want PSR to only create tags
# and not manage file versions, but it often expects to write the version.

# The setting `version_variable` tells PSR where to write the new version.
# If hatch-vcs updates `_version.py` at build time based on the tag, then PSR writing
# to `_version.py` before tagging is the standard flow.
