[build-system]
requires = ["hatchling>=1.18.0", "python-semantic-release>=8.7.0", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "salvajson"
dynamic = ["version"]
description = "Fix corrupted JSON files using the jsonic JSON parser in JavaScript"
readme = "README.md"
requires-python = ">=3.10"
license = "Apache-2.0"
dependencies = [
    "pythonmonkey>=1.1.0",
    "fire>=0.7.0",
    "orjson>=3.10",
]
authors = [
    {name = "Adam Twardoch", email = "adam+github@twardoch.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[tool.hatch.metadata]
allow-direct-references = true
dynamic = ["version"]


[tool.hatch.version]
source = "vcs"
vcs_opts = { "tag_prefix" = "v" }

[tool.hatch.build.targets.wheel]
packages = ["src/salvajson"]
artifacts = ["src/salvajson/salvajson.js"]

[tool.hatch.build.targets.sdist]
include = [
    "src/salvajson",
    "js_src",
    "build.py",
    "README.md",
    "pyproject.toml"
]

[tool.hatch.build.hooks.custom]
path = "build.py"

[project.optional-dependencies]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-sugar>=1.0.0",
    "pytest-xdist>=3.6.0",
    "pytest-timeout>=2.3.0",
    "coverage>=6.0.0",
]
dev = [
    "build>=1.0.0",
    "hatchling>=1.18.0",
    "twine>=4.0.0",
    "python-semantic-release>=8.7.0",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --cov=src --cov-report=term-missing --cov-fail-under=80"
filterwarnings = [
    "ignore::pytest.PytestAssertRewriteWarning",
    "ignore::pytest.PytestConfigWarning"
]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "setup.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
