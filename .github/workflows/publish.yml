name: Publish to PyPI

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags, e.g. v1.0.0

jobs:
  publish:
    # Cancel any in-progress runs if a new one is triggered on a tag
    concurrency: publish-package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all tags and history for proper versioning

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'js_src/package.json'

      # Install Node dependencies and build JS bundle
      - name: Build JS bundle
        working-directory: js_src
        run: |
          npm ci
          npm run build

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine hatchling

      # Verify dist directory is empty/doesn't exist
      - name: Clean dist
        run: |
          rm -rf dist/
          mkdir dist/

      # Build both wheel and sdist
      - name: Build package
        run: python -m build

      # Verify the dist directory contains files before uploading
      - name: Verify dist contents
        run: |
          ls -la dist/
          test -n "$(find dist -name '*.whl')" || exit 1
          test -n "$(find dist -name '*.tar.gz')" || exit 1

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: python -m twine upload dist/*
