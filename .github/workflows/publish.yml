name: Publish to PyPI

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags, e.g. v1.0.0

jobs:
  publish:
    # Cancel any in-progress runs if a new one is triggered on a tag
    concurrency: publish-package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all tags and history for proper versioning

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # If you wish to build Node-based artifacts or do other Node tasks, you can add them here.

      # Example caching for “uv” environment if it supports caching:
      # Adjust to match how your "uv" tool caches dependencies
      - name: Cache uv environment
        uses: actions/cache@v3
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-deps-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-uv-deps-

      - name: Install uv (hypothetical replacement for pip)
        # Provide how you actually install "uv" below if it needs a pip install or a direct bash step
        run: |
          python -m pip install --upgrade pip
          python -m pip install uv

      - name: Install build dependencies
        # Example usage with a hypothetical "uv" approach
        run: |
          uv install build
          uv install twine
          uv install hatchling

      - name: Build package
        # If "uv" has a build command, use it. Otherwise, continue with the standard approach:
        run: uv build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        # If "uv" can publish directly, use that. Otherwise, revert to twine:
        run: uv publish dist/*
